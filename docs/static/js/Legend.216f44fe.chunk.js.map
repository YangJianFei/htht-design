{"version":3,"sources":["components/legend/demo/codes.md","components/legend/demo/index.jsx","components/legend/demo/horizontal/index.jsx","components/legend/demo/portrait/index.jsx","components/legend/demo/demos.jsx","components/legend/index.jsx"],"names":["module","exports","Legend","state","width","height","hash","createHash","ctx","document","querySelector","this","getContext","dataSource","props","isHorizontal","isLableOnLine","isGradient","title","value","valueMaxLength","color","titleLength","length","colorLength","xNum","xStep","xS","yS","yStep","titleFontSize","parseInt","valueFontSize","setState","yNum","font","fillText","i","grd","createLinearGradient","addColorStop","fillStyle","fillRect","className","style","React","Component","LegendHorizontal","LegendPortrait","codes","axios","get","demoCodes","then","res","data","split","filter","Boolean","map","code","replace","trim","mainDesc","desc","main","demoDesc","demo","apiData","handleArrs","demos"],"mappings":"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","file":"static/js/Legend.216f44fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/codes.1883370f.md\";","import React from 'react'\nimport {createHash} from \"../../../utils/utils\";\n\nclass Legend extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      width: 150,\n      height: 200,\n    }\n    this.hash = createHash(6)\n  }\n\n  componentDidMount() {\n    const c = document.querySelector(`.myLegend-${this.hash}`)\n    const ctx = c.getContext(\"2d\");\n\n    const {dataSource} = this.props\n    const {isHorizontal, isLableOnLine,isGradient, title, value, valueMaxLength, color} = dataSource\n\n\n\n    const titleLength = title.length// 标题字符数\n    const colorLength = isGradient?color.length-1:color.length// 颜色数量\n\n\n    if (isHorizontal) {\n      const xNum = colorLength + 1// X方向份数\n      const yNum = 5.5// y方向份数\n      const width = xNum * 20\n      const height = yNum * 20\n\n      const xStep = width / xNum\n      const yStep = height / yNum\n\n      let xS = xStep / 2\n      let yS = yStep * 1.5\n      // eslint-disable-next-line radix\n      const titleFontSize = parseInt(xStep * (xNum - 1) / titleLength)\n      // eslint-disable-next-line radix\n      const valueFontSize = parseInt(xStep)\n\n      this.setState({\n        width,\n        height,\n      }, () => {\n        ctx.font = `${titleFontSize}px Arial`;\n        // ctx.textAlign='center'\n        ctx.fillText(title, xS, yS);\n        yS += (yStep / 2)\n\n\n        for (let i = 0; i < colorLength; i++) {\n          if (isGradient) {\n            const grd=ctx.createLinearGradient(xS,yS,xS + xStep,yS);\n            grd.addColorStop(0,color[i]);\n            grd.addColorStop(1,color[i+1]);\n            ctx.fillStyle=grd;\n          }else {\n            ctx.fillStyle = color[i];\n          }\n          ctx.fillRect(xS, yS, xStep, yStep * 1.5);\n          xS += xStep\n\n        }\n\n        ctx.font = `${valueFontSize}px Arial`;\n        if (isLableOnLine) {\n          xS = xStep * 1.25\n          yS = yStep * 5\n          for (let i = 0; i < value.length; i++) {\n            ctx.fillText(value[i], xS, yS);\n            xS += xStep\n          }\n        } else {\n          xS = xStep * 0.75\n          yS = yStep * 5\n          for (let i = 0; i < value.length; i++) {\n            ctx.fillText(value[i], xS, yS);\n            xS += xStep\n          }\n        }\n      })\n    } else {\n      const xNum = valueMaxLength + 3// X方向份数\n      const yNum = colorLength + 2.5// y方向份数\n      const width = xNum * 20\n      const height = yNum * 20\n\n      const xStep = width / xNum\n      const yStep = height / yNum\n      let xS = xStep / 2\n      let yS = yStep * 1.5\n      // eslint-disable-next-line radix\n      const titleFontSize = parseInt(xStep * (xNum - 1) / titleLength)\n      // eslint-disable-next-line radix\n      const valueFontSize = parseInt(yStep)\n\n      this.setState({\n        width,\n        height,\n      }, () => {\n        ctx.font = `${titleFontSize}px Arial`;\n        ctx.fillText(title, xS, yS);\n        yS += (yStep / 2)\n\n\n        for (let i = 0; i < colorLength; i++) {\n          if (isGradient) {\n            const grd=ctx.createLinearGradient(xS,yS,xS ,yS+ yStep);\n            grd.addColorStop(0,color[i]);\n            grd.addColorStop(1,color[i+1]);\n            ctx.fillStyle=grd;\n          }else {\n            ctx.fillStyle = color[i];\n          }\n          ctx.fillRect(xS, yS, xStep * 1.5, yStep);\n          yS += yStep\n\n        }\n\n        ctx.font = `${valueFontSize}px Arial`;\n        if (isLableOnLine) {\n          xS += (xStep * 2)\n          yS = yStep * 3.5\n          for (let i = 0; i < value.length; i++) {\n            ctx.fillText(value[i], xS, yS);\n            yS += yStep\n          }\n        } else {\n\n          xS += (xStep * 2)\n          yS = yStep * 3\n          for (let i = 0; i < value.length; i++) {\n            ctx.fillText(value[i], xS, yS);\n            yS += yStep\n          }\n        }\n      })\n    }\n  }\n\n\n  render() {\n    const {width, height} = this.state;\n    return (\n      <div className=\"htht-legend\">\n        <canvas className={`myLegend-${this.hash}`} width={width} height={height}\n                style={{\"border\": \"1px solid #000000\"}}/>\n      </div>\n    )\n  }\n}\n\nexport default Legend\n","import React from 'react';\n\n\nimport Legend from '../index';\n\nconst dataSource = {\n  isHorizontal: true,\n  isLableOnLine: false,\n  isGradient: false,\n  title: '温度（℃）',\n  value: [1, 2, 3, 4, 5],\n  valueMaxLength: 1,\n  color: [\n    'rgba(200,200,200,1)',\n    'rgba(190,190,190,1)',\n    'rgba(130,130,130,1)',\n    'rgba(60,60,60,1)',\n    'rgba(0,0,0,1)'],\n};\n\nfunction LegendHorizontal() {\n  return <Legend dataSource={dataSource}/>;\n}\n\nexport default LegendHorizontal;\n","import React from 'react'\n\nimport Legend from '../index'\n\nconst dataSource = {\n  isHorizontal: false,\n  isLableOnLine: true,\n  isGradient: true,\n  title: '温度（℃）',\n  value: [1, 2, 3, 4],\n  valueMaxLength: 1,\n  color: [\n    'rgba(200,200,200,1)',\n    'rgba(190,190,190,1)',\n    'rgba(130,130,130,1)',\n    'rgba(60,60,60,1)',\n    'rgba(0,0,0,1)',\n    'rgba(0,0,0,1)'\n  ]\n}\n\nfunction LegendPortrait() {\n  return <Legend dataSource={dataSource} />\n}\n\nexport default LegendPortrait\n","import LegendHorizontal from './horizontal'\nimport LegendPortrait from './portrait'\n\n\nexport default [LegendHorizontal, LegendPortrait]\n","import React from 'react'\nimport axios from 'axios'\nimport MainContent from '../../site/template/demo_content'\nimport desc from './desc.json'\nimport demoCodes from './demo/codes.md'\nimport demos from './demo/demos'\nimport { handleArrs } from '../../utils/utils'\n\nexport default class extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      codes: ''\n    }\n  }\n\n  componentDidMount() {\n    axios.get(demoCodes).then(res => {\n      const { data } = res\n      let codes = data.split('---').filter(Boolean)\n      codes = codes.map(code => {\n        return code\n          .replace(/```jsx/, '')\n          .replace(/```/, '')\n          .trim()\n      })\n      this.setState({ codes })\n    })\n  }\n\n  render() {\n    const { codes } = this.state\n    const mainDesc = desc.main\n    const demoDesc = desc.demo\n    const { apiData } = desc\n    const data = handleArrs(demos, codes, demoDesc)\n    return <MainContent data={data} mainDesc={mainDesc} apiData={apiData} />\n  }\n}\n"],"sourceRoot":""}